附录四 应用程序

1.假设William和Julie公用一个银行账户。银行有许多自动取款机，两人同时在两台取款机上进行作业。William希望先在定期账户中存入4000美金，然后将活期账户中的3000美金转账到定期账户中。Julie希望先在活期账户中存入5000美金，然后从定期账户中取走1000美金。
Scenario A
	.......................
（内容太多，这里就不展示了）

序列1中存在以下问题：
（1）	不正确的隔离等级
（2）	确认信息位置不正确
（3）	不正确的事务边界
（4）	在事务边界内等待用户输入
 对于以上每个问题，解释为何不正确，题目将提供一个例子，请完成剩余部分。

（1）ANS：如果事务的隔离等级不正确，会导致每个事务读取的同一个数据产生不一致性，不仅如此，隔离等级的不正确还有可能导致数据更新的丢失以及不可重复读，会存在问题。所以，应该要保证事务的隔离等级设计正确。

（2）ANS：确认信息位置不正确，如用户可能在事务没有结束前就收到了操作完成的确认信息。当事务发生回滚后，事务将会被撤销，但是用户以为已经执行成功，会存在问题。所以，所有的确认信息必须在事务成功提交后进行显示。

（3）ANS：不正确的事务边界，所谓的事务边界即是指单个SQL语句在后端数据库上同时执行的数量，用户的实际操作中每次为数据上锁都要等待事务提交结束才释放。在这道题目中，不正确的事务边界会导致数据更新丢失，所以首先在银行存取款问题中，应该调整事务边界，允许用户的最大吞吐量。

（4）ANS：在用户边界内等待用户输入。首先人的处理速度远远低于计算机的处理速度，其次是一切都应该最好在事务的控制范围内，尽可能的减小外部对于事务内部执行的干扰。而用户输入就是一个不可控因素，所以在事务边界等待用户输入是一种不好的问题，应该在事务中排除这种外部干扰。


Scenario B
	.......................
（内容太多，这里就不展示了）

序列2中存在以下问题：
（1）不正确的隔离等级
（2）在事务边界内等待用户输入

（1）ANS：不正确的隔离等级会导致不同事务对于同一个数据的读产生不一致，进而会导致数据更新丢失。
（2）ANS：如果存在事务边界内等待用户输入的情况存在时，会使得吞吐量大大降低，因为等待用户输入处于事务内时，则在等待用户输入阶段就要暂停事务，进而可能导致其他众多事务因为需要该事务结束后释放的数据而陷入漫长的等待状态。


Scenario C
	.......................
（内容太多，这里就不展示了）

序列3中存在以下问题：
（1）不正确的隔离等级
（2）在事务边界内等待用户输入

（1）ANS：不正确的隔离等级。这里的隔离等级不是说会导致错误的不正确，我认为是严格的隔离等级，适当的隔离等级应该是可重复读取隔离。
（2）ANS：如果存在事务边界内等待用户输入的情况存在时，会使得吞吐量大大降低，因为等待用户输入处于事务内时，则在等待用户输入阶段就要暂停事务，进而可能导致其他众多事务因为需要该事务结束后释放的数据而陷入漫长的等待状态。

=================================================================

你最终需要写出正确的顺序，以满足最大的并发操作。写出William和Julie的每个操作步骤。同时写出DBMS和ATM的操作。

 Julie

 ATM prompts user for operation.
 Julie Chooses Deposit into Checking.
 ATM Prompts user for amount.
 Julie enters 500.
  
 Begin transaction (serializable isolation level)
 Select balance of checking 
 checking_balance = checking_balance + $500 
 Update checking balance in database.
 End Transaction 
 ATM displays confirmation of deposit.
 ATM prompts user for operation.
 Julie chooses withdrawal from savings.
 ATM prompts user for amount.
 Julie enters 100.

 Begin transaction (serializable isolation level)
 Select the savings checking balance in database.
 savings_balance = savings_balance - $100 
 Update savings balance in database. 
 End Transaction 

 ATM displays confirmation of withdrawal.
 ATM Prompt user for operation.
 Julie chooses no more operations.   
===============================
 Willian

 ATM prompts user for operation.
 William Chooses Deposit into Savings.
 ATM prompts user for amount. 
 William enters 400.

  Begin transaction(serializable isolation level)
  Select balance of savings
  savings_balance = saving_balance + $400
  Update savings balance in database.
  End Transaction

 ATM displays confirmation fo deposit.
 ATM propmpts user for operation.
 William chooses transfer from checking to savings.
 ATM prompts user for amount.
 William enters 300.

  Begin transaction (serializable isolation level)
  Select the checking balance.
  checking_balance = checking_balance -$300
  Select the savings balance.
  savings_balance = savings_balance +$300

 Update savings balance in database.
 Update checking balance in database.
 End Trensaction
 ATM displays confirmation of transfer.
 ATM Prompt user for operation.
 William chooses no more operations.
====================================================================


2.假设你需要为电影院编写一个在线售票系统，用户量较大。假设用户只能在电影开始前30分钟才可以买票，因此会有大量的用户进行并发操作，一个用户的操作顺序如下：
...........................
（内容此处省略，可以直接看文档）


对于每个事务，你需要包括：
1）解释事务何时开始，何时结束。
ANS:
// Ask the user how many seats he wants.
		System.out.println( "Please enter the number of seats that you want to buy: " );
		numseats = Integer.parseInt( keyIn.readLine() );
		stmt.executeUpdate("BeginWork");
		stmt.executeUpdate( "set transaction isolation level serializable" );
		
		// Query the database for the number of available standrd seats.
		sqlquery = new String( "select available_standard_seats from showing where movie_id = " + movie_id );
		rset = stmt.executeQuery( sqlquery );
	事务从stmt.executeUpdate("BeginWork");开始到rset =stmt.executeQuery( sqlquery );
结束。

2）解释为何如此设置事务边界。
ANS:因为查询必须有事务边界保护，如果没有事务边界保护，会产生两个事务读的不一致性。

3）解释为何你的隔离等级能够确保所有用户看到一致的数据视图。
ANS:事务要设置为serializable隔离等级。如果事务设置为read committed，那么这两个事务发出的请求就有可能超过当前课用的座位数量。